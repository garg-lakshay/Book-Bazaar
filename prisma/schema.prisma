// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String
  role        String    // "owner" | "seller" | "user"
  verified    Boolean   @default(false)
  createdAt   DateTime  @default(now())

  street      String?
  city        String?
  state       String?
  zipCode     String?
  country     String?

  // Relations (explicit relation names required where User is referenced multiple times)
  sellerBooks  Book[]   @relation("SellerBooks")
  ownerBooks   Book[]   @relation("OwnerBooks")
  buyerOrders  Order[]  @relation("BuyerOrders")
  sellerOrders Order[]  @relation("SellerOrders")
  cartItems    CartItem[]
  tokens       VerificationToken[]
  stripe       StripeAccount?
  sellerTransactions TransactionLog[] @relation("SellerTransactions")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
}

model StripeAccount {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  accountId  String   // Stripe Connect account ID
  createdAt  DateTime @default(now())
  isVerified Boolean  @default(false)
}

model Book {
  id          String    @id @default(cuid())
  title       String
  author      String
  description String?
  price       Float
  stock       Int       @default(1)

  // Relations to User (seller and owner) â€” relation names disambiguate them
  seller      User      @relation("SellerBooks", fields: [sellerId], references: [id])
  sellerId    String

  owner       User      @relation("OwnerBooks", fields: [ownerId], references: [id])
  ownerId     String

  createdAt   DateTime  @default(now())

  orders      Order[]
  cartItems   CartItem[]
}

model CartItem {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   String
  quantity Int      @default(1)
  addedAt  DateTime @default(now())
}

model Order {
  id              String   @id @default(cuid())

  // Buyer relation
  buyer           User     @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId         String

  // Seller relation
  seller          User     @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId        String

  // Book relation
  book            Book     @relation(fields: [bookId], references: [id])
  bookId          String

  total           Float
  status          String   @default("pending") // "pending" | "paid" | "shipped"
  createdAt       DateTime @default(now())
  stripePaymentId String?
  transactions    TransactionLog[] @relation("OrderTransactions")
}

model TransactionLog {
  id         String   @id @default(cuid())

  order      Order    @relation("OrderTransactions", fields: [orderId], references: [id])
  orderId    String

  seller     User     @relation("SellerTransactions", fields: [sellerId], references: [id])
  sellerId   String

  amount     Float
  fee        Float
  createdAt  DateTime @default(now())
}
